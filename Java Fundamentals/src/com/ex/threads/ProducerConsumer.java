package com.ex.threads;

public class ProducerConsumer {
	
	/*
	 * An example of a simple producer-consumer multi-threading scenario
	 * The main method creates and starts producer and consumer threads
	 * The producer thread creates the values
	 * The consumer thread reads the values created
	 */
	public static void main(String[] args) {
		// the container where we store the values generated
		Holder data = new Holder();
		int numValuesToGenerate = 10;
		// create and start the threads...
		Thread producerThread = new Thread(new Producer(data, numValuesToGenerate));
		Thread consumerThread = new Thread(new Consumer(data, numValuesToGenerate));
		System.out.println("Starting threads...");
		producerThread.start();
		consumerThread.start();
		try {
			// wait for threads to finish
			producerThread.join();
			consumerThread.join();
			System.out.println("Both finished executing");
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}

class Holder {
	/*
	 * this class holds the values generated by the producer and has synchronized methods
	 * for getting and setting the values
	 */
	int contents = 0;
	private boolean avail = false;
	
	public synchronized int getVal() {
		while (avail == false) { // wait for value to be available (read by consumer)
			try {wait();} catch (InterruptedException e) {e.printStackTrace();}
		}
		avail = false;
		notifyAll();
		return contents;
	}
	
	public synchronized void setVal(int val) {
		while (avail == true) { // wait for value to be generated by producer
			try { wait();} catch(InterruptedException e) {e.printStackTrace();}
		}
		contents = val; // set the value
		avail = true;
		notifyAll();
	}
}

class Producer implements Runnable {
	public Holder data;
	int max;

	public Producer(Holder data, int max) {
		this.data = data;
		this.max = max;
	}

	@Override
	public void run() {
		for (int i=0;i<max;i++) {
			// loop and set values
			this.data.setVal(i);
			System.out.println("Producer put: "+i);
		}
	}
}

class Consumer implements Runnable {
	public Holder data;
	int max;

	public Consumer(Holder data, int max) {
		this.data = data;
		this.max = max;
	}

	@Override
	public void run() {
		for (int i=0;i<max;i++) {
			// loop and retrieve values
			int currentVal = this.data.getVal();
			System.out.println("Consumer got: " + currentVal);
		}
	}


}
